class CountRegressor(nn.Module):
    def __init__(self, input_channels, pool='mean', use_batchnorm=False, use_dropout=False):
        super(CountRegressor, self).__init__()
        self.pool = pool
        self.use_batchnorm = use_batchnorm
        self.use_dropout = use_dropout
        
        self.conv1 = nn.Conv2d(input_channels, 32, kernel_size=3, stride=1, padding=1)
        if self.use_batchnorm:
            self.bn1 = nn.BatchNorm2d(32)
        self.relu1 = nn.ReLU(inplace=True)
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        if self.use_batchnorm:
            self.bn2 = nn.BatchNorm2d(64)
        self.relu2 = nn.ReLU(inplace=True)
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        if self.use_batchnorm:
            self.bn3 = nn.BatchNorm2d(128)
        self.relu3 = nn.ReLU(inplace=True)
        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)
        
        self.fc1 = nn.Linear(128 * 4 * 4, 512)
        if self.use_batchnorm:
            self.bn4 = nn.BatchNorm1d(512)
        self.relu4 = nn.ReLU(inplace=True)
        if self.use_dropout:
            self.dropout = nn.Dropout(p=0.5)
        self.fc2 = nn.Linear(512, 1)
        
    def forward(self, x):
        x = self.conv1(x)
        if self.use_batchnorm:
            x = self.bn1(x)
        x = self.relu1(x)
        x = self.pool1(x)
        
        x = self.conv2(x)
        if self.use_batchnorm:
            x = self.bn2(x)
        x = self.relu2(x)
        x = self.pool2(x)
        
        x = self.conv3(x)
        if self.use_batchnorm:
            x = self.bn3(x)
        x = self.relu3(x)
        x = self.pool3(x)
        
        x = x.view(x.size(0), -1)
        x = self.fc1(x)
        if self.use_batchnorm:
            x = self.bn4(x)
        x = self.relu4(x)
        if self.use_dropout:
            x = self.dropout(x)
        x = self.fc2(x)
        
        if self.pool == 'mean':
            x = torch.mean(x, dim=(0), keepdim=True)
        elif self.pool == 'max':
            x, _ = torch.max(x, 0, keepdim=True)
        
        return x
